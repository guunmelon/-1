# -*- coding: utf-8 -*-
"""TFT11_deck.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nKFGGyjdlEwAROLysoGO1q8MjZ40P4Ji
"""


from itertools import combinations
from collections import defaultdict

# 챔피언과 시너지 데이터 정의
champions_synergies = {
    "Dragonlord": ["Lee Sin", "Xayah", "Rakan", "Diana", "Janna"],
    "Dryad": ["Ornn", "Rek'Sai", "Azir", "Kindred", "Gnar"],
    "Fated": ["Sett", "Syndra", "Kindred", "Yasuo", "Ahri", "Thresh", "Aphelios"],
    "Fortune": ["Annie", "Kobuko", "Tristana", "Zoe", "Teemo"],
    "Ghostly": ["Kayn", "Aatrox", "Morgana", "Caitlyn", "Illaoi", "Shen"],
    "Heavenly": ["Qiyana", "Wukong", "Neeko", "Kha'Zix", "Soraka", "Malphite"],
    "Inkshadow": ["Kai'Sa", "Aatrox", "Udyr", "Volibear", "Senna", "Jax"],
    "Mythic": ["Nautilus", "Bard", "Hwei", "Lillia", "Neeko", "Kog'Maw", "Cho'Gath", "Tahm Kench"],
    "Porcelain": ["Lissandra", "Ashe", "Lux", "Amumu"],
    "Storyweaver": ["Galio", "Garen", "Riven", "Zoe", "Irelia", "Sivir", "Zyra"],
    "Umbral": ["Sett", "Sylas", "Yorick", "Alune", "Yone", "Darius"],
    "Altruist": ["Rakan", "Riven", "Soraka"],
    "Arcanist": ["Lissandra", "Syndra", "Zoe", "Neeko", "Lux", "Ahri", "Illaoi"],
    "Artist": ["Hwei"],
    "Behemoth": ["Ornn", "Yorick", "Udyr", "Cho'Gath", "Shen", "Thresh", "Malphite"],
    "Bruiser": ["Galio", "Sylas", "Aatrox", "Rek'Sai", "Kobuko", "Riven", "Tahm Kench"],
    "Duelist": ["Qiyana", "Lee Sin", "Tristana", "Volibear", "Irelia", "Yasuo", "Darius"],
    "Great": ["Wukong"],
    "Invoker": ["Annie", "Alune", "Azir", "Lillia", "Kog'Maw", "Janna"],
    "Lovers": ["Xayah", "Rakan"],
    "Reaper": ["Kayn", "Yone", "Kindred", "Kha'Zix"],
    "Sage": ["Morgana", "Diana", "Wukong", "Zyra"],
    "Sniper": ["Ashe", "Senna", "Kog'Maw", "Caitlyn", "Aphelios"],
    "Spirit Walker": ["Udyr"],
    "Trickshot": ["Kai'Sa", "Xayah", "Bard", "Teemo", "Sivir"],
    "Warden": ["Nautilus", "Garen", "Sett", "Jax", "Amumu", "Illaoi", "Gnar"]
}

# 시너지 분류
synergy_types = {
    "type1": ["Dragonlord", "Heavenly", "Altruist", "Sage"],
    "type2": ["Dryad", "Ghostly", "Porcelain", "Umbral", "Arcanist", "Behemoth", "Bruiser", "Duelist", "Invoker", "Reaper", "Sniper", "Trickshot", "Warden"],
    "type3": ["Fated", "Fortune", "Inkshadow", "Mythic", "Storyweaver"],
    "type4": ["Spirit Walker", "Great", "Artist", "Lovers"]
}

def calculate_synergy_score(champions):
    if "Xayah" in champions and "Rakan" in champions:
        return -1, {}

    synergy_count = defaultdict(int)
    for champ in champions:
        for synergy, champs in champions_synergies.items():
            if champ in champs:
                synergy_count[synergy] += 1

    synergy_score = 0
    for synergy, count in synergy_count.items():
        if synergy in synergy_types["type1"] and count >= 2:
            synergy_score += (count - 2) + 1
        elif synergy in synergy_types["type2"] and count >= 2:
            synergy_score += count // 2
        elif synergy in synergy_types["type3"] and count >= 3:
            synergy_score += (count // 2)
        elif synergy in synergy_types["type4"] and count >= 1:
            synergy_score += 1

    return synergy_score, {k: v for k, v in synergy_count.items() if (
        (k in synergy_types["type1"] and v >= 2) or
        (k in synergy_types["type2"] and v >= 2) or
        (k in synergy_types["type3"] and v >= 3) or
        (k in synergy_types["type4"] and v >= 1)
    )}

def find_best_decks(champion_pool, num_champions, top_n=5):
    top_decks = []

    # 필터링: 최소 시너지 활성화 개수에 맞는 챔피언 조합만 고려
    filtered_pool = set()
    for champ in champion_pool:
        for synergy, champs in champions_synergies.items():
            if champ in champs:
                filtered_pool.add(champ)
                break

    for combo in combinations(filtered_pool, num_champions):
        if "Xayah" in combo and "Rakan" in combo:
            continue
        score, synergies = calculate_synergy_score(combo)
        if score > 0:
            top_decks.append((score, combo, synergies))
            top_decks = sorted(top_decks, key=lambda x: x[0], reverse=True)[:top_n]

    return top_decks

def main():
    champion_pool = set(champ for champs in champions_synergies.values() for champ in champs)
    num_champions = int(input("몇 명의 챔피언들로 시너지 조합을 짤까요? "))

    top_decks = find_best_decks(champion_pool, num_champions)

    print("상위 5개의 덱:")
    for i, (score, deck, synergies) in enumerate(top_decks):
        print(f"\n덱 {i + 1}:")
        print(deck)
        print("시너지 점수:", score)
        print("활성화된 시너지:")
        for synergy, count in synergies.items():
            print(f"{synergy}: {count}명")

if __name__ == "__main__":
    main()
