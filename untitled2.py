# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nKFGGyjdlEwAROLysoGO1q8MjZ40P4Ji
"""

from itertools import combinations

# 챔피언과 시너지 정보를 구조화하여 저장
synergy_champions = {
    "Dragonlord": ["Lee Sin", "Xayah&Rakan", "Diana", "Janna"],
    "Dryad": ["Ornn", "Rek'Sai", "Azir", "Kindred", "Gnar"],
    "Fated": ["Sett", "Syndra", "Kindred", "Yasuo", "Ahri", "Thresh", "Aphelios"],
    "Fortune": ["Annie", "Kobuko", "Tristana", "Zoe", "Teemo"],
    "Ghostly": ["Kayn", "Aatrox", "Morgana", "Caitlyn", "Illaoi", "Shen"],
    "Heavenly": ["Qiyana", "Wukong", "Neeko", "Kha'Zix", "Soraka", "Malphite"],
    "Inkshadow": ["Kai'Sa", "Aatrox", "Udyr", "Volibear", "Senna", "Jax"],
    "Mythic": ["Nautilus", "Bard", "Hwei", "Lillia", "Neeko", "Kog'Maw", "Cho'Gath", "Tahm Kench"],
    "Porcelain": ["Lissandra", "Ashe"],
    "Storyweaver": ["Galio", "Garen", "Riven", "Zoe", "Irelia", "Sivir", "Zyra"],
    "Umbral": ["Sett", "Sylas", "Yorick", "Alune", "Yone", "Darius"],
    "Altruist": ["Rakan", "Riven", "Soraka"],
    "Arcanist": ["Lissandra", "Syndra", "Zoe", "Neeko", "Lux", "Ahri", "Illaoi"],
    "Artist": ["Hwei"],
    "Behemoth": ["Ornn", "Yorick", "Udyr", "Cho'Gath", "Shen", "Thresh", "Malphite"],
    "Bruiser": ["Galio", "Sylas", "Aatrox", "Rek'Sai", "Kobuko", "Riven", "Tahm Kench"],
    "Duelist": ["Qiyana", "Lee Sin", "Tristana", "Volibear", "Irelia", "Yasuo", "Darius"],
    "Great": ["Wukong"],
    "Invoker": ["Annie", "Alune", "Azir", "Lillia", "Kog'Maw", "Janna"],
    "Lovers": ["Xayah&Rakan"],
    "Reaper": ["Kayn", "Yone", "Kindred", "Kha'Zix"],
    "Sage": ["Morgana", "Diana", "Wukong", "Zyra"],
    "Sniper": ["Ashe", "Senna", "Kog'Maw", "Caitlyn", "Aphelios"],
    "Spirit Walker": ["Udyr"],
    "Trickshot": ["Kai'Sa", "Xayah", "Bard", "Teemo", "Sivir"],
    "Warden": ["Nautilus", "Garen", "Sett", "Jax", "Amumu", "Illaoi", "Gnar"]
}

# 시너지 활성화 조건과 점수 증가표
synergy_activation = {
    "Dragonlord": (2, 1),
    "Heavenly": (2, 1),
    "Altruist": (2, 1),
    "Sage": (2, 1),
    "Dryad": (2, 2),
    "Ghostly": (2, 2),
    "Porcelain": (2, 2),
    "Umbral": (2, 2),
    "Arcanist": (2, 2),
    "Behemoth": (2, 2),
    "Bruiser": (2, 2),
    "Duelist": (2, 2),
    "Invoker": (2, 2),
    "Reaper": (2, 2),
    "Sniper": (2, 2),
    "Trickshot": (2, 2),
    "Warden": (2, 2),
    "Fated": (3, 1),
    "Fortune": (3, 1),
    "Inkshadow": (3, 1),
    "Mythic": (3, 1),
    "Storyweaver": (3, 1),
    "Spirit Walker": (1, 1),
    "Great": (1, 1),
    "Artist": (1, 1),
    "Lovers": (1, 1)
}

# 챔피언별 시너지 정보 추출
champion_synergies = {}
for synergy, champions in synergy_champions.items():
    for champion in champions:
        if champion not in champion_synergies:
            champion_synergies[champion] = []
        champion_synergies[champion].append(synergy)

# 시너지 점수를 계산하는 함수
def calculate_synergy_score(team):
    synergy_count = {}
    score = 0
    for champion in team:
        for synergy in champion_synergies[champion]:
            if synergy not in synergy_count:
                synergy_count[synergy] = 0
            synergy_count[synergy] += 1
    for synergy, count in synergy_count.items():
        activation, increment = synergy_activation[synergy]
        if count >= activation:
            score += (count // activation) * increment
    return score

# 가능한 모든 챔피언 조합을 생성하고 시너지 점수를 계산하여 최적의 덱을 찾기
def find_best_team(champion_count):
    best_team = None
    best_score = 0
    all_champions = list(champion_synergies.keys())
    for team in combinations(all_champions, champion_count):
        score = calculate_synergy_score(team)
        if score > best_score:
            best_score = score
            best_team = team
    return best_team, best_score

# 사용자로부터 챔피언 수 입력받기
champion_count = int(input("챔피언 수를 입력하세요: "))

# 최적의 덱과 그 시너지 출력
best_team, best_score = find_best_team(champion_count)
print("최적의 덱:", best_team)
print("시너지 점수:", best_score)

from itertools import combinations

# 챔피언과 시너지 정보를 구조화하여 저장
synergy_champions = {
    "Dragonlord": ["Lee Sin", "Xayah", "Rakan", "Diana", "Janna"],
    "Dryad": ["Ornn", "Rek'Sai", "Azir", "Kindred", "Gnar"],
    "Fated": ["Sett", "Syndra", "Kindred", "Yasuo", "Ahri", "Thresh", "Aphelios"],
    "Fortune": ["Annie", "Kobuko", "Tristana", "Zoe", "Teemo"],
    "Ghostly": ["Kayn", "Aatrox", "Morgana", "Caitlyn", "Illaoi", "Shen"],
    "Heavenly": ["Qiyana", "Wukong", "Neeko", "Kha'Zix", "Soraka", "Malphite"],
    "Inkshadow": ["Kai'Sa", "Aatrox", "Udyr", "Volibear", "Senna", "Jax"],
    "Mythic": ["Nautilus", "Bard", "Hwei", "Lillia", "Neeko", "Kog'Maw", "Cho'Gath", "Tahm Kench"],
    "Porcelain": ["Lissandra", "Ashe","Lux","Amumu"],
    "Storyweaver": ["Galio", "Garen", "Riven", "Zoe", "Irelia", "Sivir", "Zyra"],
    "Umbral": ["Sett", "Sylas", "Yorick", "Alune", "Yone", "Darius"],
    "Altruist": ["Rakan", "Riven", "Soraka"],
    "Arcanist": ["Lissandra", "Syndra", "Zoe", "Neeko", "Lux", "Ahri", "Illaoi"],
    "Artist": ["Hwei"],
    "Behemoth": ["Ornn", "Yorick", "Udyr", "Cho'Gath", "Shen", "Thresh", "Malphite"],
    "Bruiser": ["Galio", "Sylas", "Aatrox", "Rek'Sai", "Kobuko", "Riven", "Tahm Kench"],
    "Duelist": ["Qiyana", "Lee Sin", "Tristana", "Volibear", "Irelia", "Yasuo", "Darius"],
    "Great": ["Wukong"],
    "Invoker": ["Annie", "Alune", "Azir", "Lillia", "Kog'Maw", "Janna"],
    "Lovers": ["Xayah", "Rakan"],
    "Reaper": ["Kayn", "Yone", "Kindred", "Kha'Zix"],
    "Sage": ["Morgana", "Diana", "Wukong", "Zyra"],
    "Sniper": ["Ashe", "Senna", "Kog'Maw", "Caitlyn", "Aphelios"],
    "Spirit Walker": ["Udyr"],
    "Trickshot": ["Kai'Sa", "Xayah", "Bard", "Teemo", "Sivir"],
    "Warden": ["Nautilus", "Garen", "Sett", "Jax", "Amumu", "Illaoi", "Gnar"]
}

# 시너지 활성화 조건과 점수 증가표
synergy_activation = {
    "Dragonlord": (2, 1),
    "Heavenly": (2, 1),
    "Altruist": (2, 1),
    "Sage": (2, 1),
    "Dryad": (2, 2),
    "Ghostly": (2, 2),
    "Porcelain": (2, 2),
    "Umbral": (2, 2),
    "Arcanist": (2, 2),
    "Behemoth": (2, 2),
    "Bruiser": (2, 2),
    "Duelist": (2, 2),
    "Invoker": (2, 2),
    "Reaper": (2, 2),
    "Sniper": (2, 2),
    "Trickshot": (2, 2),
    "Warden": (2, 2),
    "Fated": (3, 1),
    "Fortune": (3, 1),
    "Inkshadow": (3, 1),
    "Mythic": (3, 1),
    "Storyweaver": (3, 1),
    "Spirit Walker": (1, 1),
    "Great": (1, 1),
    "Artist": (1, 1),
    "Lovers": (1, 1)
}

# 챔피언별 시너지 정보 추출
champion_synergies = {}
for synergy, champions in synergy_champions.items():
    for champion in champions:
        if champion not in champion_synergies:
            champion_synergies[champion] = []
        champion_synergies[champion].append(synergy)

# 시너지 점수를 계산하는 함수
def calculate_synergy_score(team):
    synergy_count = {}
    score = 0
    for champion in team:
        for synergy in champion_synergies[champion]:
            if synergy not in synergy_count:
                synergy_count[synergy] = 0
            synergy_count[synergy] += 1
    for synergy, count in synergy_count.items():
        activation, increment = synergy_activation[synergy]
        if count >= activation:
            score += (count // activation) * increment
    return score

# 가능한 모든 챔피언 조합을 생성하고 시너지 점수를 계산하여 최적의 덱을 찾기
def find_best_team(champion_count):
    best_team = None
    best_score = 0
    all_champions = list(champion_synergies.keys())

    for team in combinations(all_champions, champion_count):
        # Xayah와 Rakan이 같이 있는 조합은 제외
        if "Xayah" in team and "Rakan" in team:
            continue

        score = calculate_synergy_score(team)
        if score > best_score:
            best_score = score
            best_team = team
    return best_team, best_score

# 사용자로부터 챔피언 수 입력받기
champion_count = int(input("챔피언 수를 입력하세요: "))

# 최적의 덱과 그 시너지 출력
best_team, best_score = find_best_team(champion_count)
print("최적의 덱:", best_team)
print("시너지 점수:", best_score)

from itertools import combinations

# 챔피언과 시너지 정보를 구조화하여 저장
synergy_champions = {
    "Dragonlord": ["Lee Sin", "Xayah", "Rakan", "Diana", "Janna"],
    "Dryad": ["Ornn", "Rek'Sai", "Azir", "Kindred", "Gnar"],
    "Fated": ["Sett", "Syndra", "Kindred", "Yasuo", "Ahri", "Thresh", "Aphelios"],
    "Fortune": ["Annie", "Kobuko", "Tristana", "Zoe", "Teemo"],
    "Ghostly": ["Kayn", "Aatrox", "Morgana", "Caitlyn", "Illaoi", "Shen"],
    "Heavenly": ["Qiyana", "Wukong", "Neeko", "Kha'Zix", "Soraka", "Malphite"],
    "Inkshadow": ["Kai'Sa", "Aatrox", "Udyr", "Volibear", "Senna", "Jax"],
    "Mythic": ["Nautilus", "Bard", "Hwei", "Lillia", "Neeko", "Kog'Maw", "Cho'Gath", "Tahm Kench"],
    "Porcelain": ["Lissandra", "Ashe","Lux","Amumu"],
    "Storyweaver": ["Galio", "Garen", "Riven", "Zoe", "Irelia", "Sivir", "Zyra"],
    "Umbral": ["Sett", "Sylas", "Yorick", "Alune", "Yone", "Darius"],
    "Altruist": ["Rakan", "Riven", "Soraka"],
    "Arcanist": ["Lissandra", "Syndra", "Zoe", "Neeko", "Lux", "Ahri", "Illaoi"],
    "Artist": ["Hwei"],
    "Behemoth": ["Ornn", "Yorick", "Udyr", "Cho'Gath", "Shen", "Thresh", "Malphite"],
    "Bruiser": ["Galio", "Sylas", "Aatrox", "Rek'Sai", "Kobuko", "Riven", "Tahm Kench"],
    "Duelist": ["Qiyana", "Lee Sin", "Tristana", "Volibear", "Irelia", "Yasuo", "Darius"],
    "Great": ["Wukong"],
    "Invoker": ["Annie", "Alune", "Azir", "Lillia", "Kog'Maw", "Janna"],
    "Lovers": ["Xayah", "Rakan"],
    "Reaper": ["Kayn", "Yone", "Kindred", "Kha'Zix"],
    "Sage": ["Morgana", "Diana", "Wukong", "Zyra"],
    "Sniper": ["Ashe", "Senna", "Kog'Maw", "Caitlyn", "Aphelios"],
    "Spirit Walker": ["Udyr"],
    "Trickshot": ["Kai'Sa", "Xayah", "Bard", "Teemo", "Sivir"],
    "Warden": ["Nautilus", "Garen", "Sett", "Jax", "Amumu", "Illaoi", "Gnar"]
}

# 시너지 활성화 조건과 점수 증가표를 그룹화하여 저장
synergy_activation = {
    "group1": (2, 1, ["Dragonlord", "Heavenly", "Altruist", "Sage"]),
    "group2": (2, 2, ["Dryad", "Ghostly", "Porcelain", "Umbral", "Arcanist", "Behemoth", "Bruiser", "Duelist", "Invoker", "Reaper", "Sniper", "Trickshot", "Warden"]),
    "group3": (3, 1, ["Fated", "Fortune", "Inkshadow", "Mythic", "Storyweaver"]),
    "group4": (1, 1, ["Spirit Walker", "Great", "Artist", "Lovers"])
}

# 챔피언별 시너지 정보 추출
champion_synergies = {}
for synergy, champions in synergy_champions.items():
    for champion in champions:
        if champion not in champion_synergies:
            champion_synergies[champion] = []
        champion_synergies[champion].append(synergy)

# 시너지 점수를 계산하는 함수
def calculate_synergy_score(team):
    synergy_count = {}
    score = 0
    for champion in team:
        for synergy in champion_synergies[champion]:
            if synergy not in synergy_count:
                synergy_count[synergy] = 0
            synergy_count[synergy] += 1

    for group, (activation, increment, synergies) in synergy_activation.items():
        for synergy in synergies:
            if synergy in synergy_count:
                count = synergy_count[synergy]
                if count >= activation:
                    score += (count // activation) * increment
    return score

# 가능한 모든 챔피언 조합을 생성하고 시너지 점수를 계산하여 최적의 덱을 찾기
def find_best_team(champion_count):
    best_team = None
    best_score = 0
    all_champions = list(champion_synergies.keys())

    for team in combinations(all_champions, champion_count):
        # Xayah와 Rakan이 같이 있는 조합은 제외
        if "Xayah" in team and "Rakan" in team:
            continue

        score = calculate_synergy_score(team)
        if score > best_score:
            best_score = score
            best_team = team
    return best_team, best_score

# 사용자로부터 챔피언 수 입력받기
champion_count = int(input("챔피언 수를 입력하세요: "))

# 최적의 덱과 그 시너지 출력
best_team, best_score = find_best_team(champion_count)
print("최적의 덱:", best_team)
print("시너지 점수:", best_score)

from itertools import combinations

# 챔피언과 시너지 정보를 구조화하여 저장
synergy_champions = {
    "Dragonlord": ["Lee Sin", "Xayah", "Rakan", "Diana", "Janna"],
    "Dryad": ["Ornn", "Rek'Sai", "Azir", "Kindred", "Gnar"],
    "Fated": ["Sett", "Syndra", "Kindred", "Yasuo", "Ahri", "Thresh", "Aphelios"],
    "Fortune": ["Annie", "Kobuko", "Tristana", "Zoe", "Teemo"],
    "Ghostly": ["Kayn", "Aatrox", "Morgana", "Caitlyn", "Illaoi", "Shen"],
    "Heavenly": ["Qiyana", "Wukong", "Neeko", "Kha'Zix", "Soraka", "Malphite"],
    "Inkshadow": ["Kai'Sa", "Aatrox", "Udyr", "Volibear", "Senna", "Jax"],
    "Mythic": ["Nautilus", "Bard", "Hwei", "Lillia", "Neeko", "Kog'Maw", "Cho'Gath", "Tahm Kench"],
    "Porcelain": ["Lissandra", "Ashe"],
    "Storyweaver": ["Galio", "Garen", "Riven", "Zoe", "Irelia", "Sivir", "Zyra"],
    "Umbral": ["Sett", "Sylas", "Yorick", "Alune", "Yone", "Darius"],
    "Altruist": ["Rakan", "Riven", "Soraka"],
    "Arcanist": ["Lissandra", "Syndra", "Zoe", "Neeko", "Lux", "Ahri", "Illaoi"],
    "Artist": ["Hwei"],
    "Behemoth": ["Ornn", "Yorick", "Udyr", "Cho'Gath", "Shen", "Thresh", "Malphite"],
    "Bruiser": ["Galio", "Sylas", "Aatrox", "Rek'Sai", "Kobuko", "Riven", "Tahm Kench"],
    "Duelist": ["Qiyana", "Lee Sin", "Tristana", "Volibear", "Irelia", "Yasuo", "Darius"],
    "Great": ["Wukong"],
    "Invoker": ["Annie", "Alune", "Azir", "Lillia", "Kog'Maw", "Janna"],
    "Lovers": ["Xayah", "Rakan"],
    "Reaper": ["Kayn", "Yone", "Kindred", "Kha'Zix"],
    "Sage": ["Morgana", "Diana", "Wukong", "Zyra"],
    "Sniper": ["Ashe", "Senna", "Kog'Maw", "Caitlyn", "Aphelios"],
    "Spirit Walker": ["Udyr"],
    "Trickshot": ["Kai'Sa", "Xayah", "Bard", "Teemo", "Sivir"],
    "Warden": ["Nautilus", "Garen", "Sett", "Jax", "Amumu", "Illaoi", "Gnar"]
}

# 시너지 활성화 조건과 점수 증가표를 그룹화하여 저장
synergy_activation = {
    "group1": (2, 1, ["Dragonlord", "Heavenly", "Altruist", "Sage"]),
    "group2": (2, 2, ["Dryad", "Ghostly", "Porcelain", "Umbral", "Arcanist", "Behemoth", "Bruiser", "Duelist", "Invoker", "Reaper", "Sniper", "Trickshot", "Warden"]),
    "group3": (3, 1, ["Fated", "Fortune", "Inkshadow", "Mythic", "Storyweaver"]),
    "group4": (1, 1, ["Spirit Walker", "Great", "Artist", "Lovers"])
}

# 챔피언별 시너지 정보 추출
champion_synergies = {}
for synergy, champions in synergy_champions.items():
    for champion in champions:
        if champion not in champion_synergies:
            champion_synergies[champion] = []
        champion_synergies[champion].append(synergy)

# 시너지 점수를 계산하는 함수
def calculate_synergy_score(team):
    synergy_count = {}
    score = 0
    for champion in team:
        for synergy in champion_synergies[champion]:
            if synergy not in synergy_count:
                synergy_count[synergy] = 0
            synergy_count[synergy] += 1

    for group, (activation, increment, synergies) in synergy_activation.items():
        for synergy in synergies:
            if synergy in synergy_count:
                count = synergy_count[synergy]
                if count >= activation:
                    score += (count // activation) * increment
    return score

# 가능한 모든 챔피언 조합을 생성하고 시너지 점수를 계산하여 최적의 덱 3개를 찾기
def find_top_teams(champion_count, top_n=3):
    all_champions = list(champion_synergies.keys())
    teams_scores = []

    for team in combinations(all_champions, champion_count):
        # Xayah와 Rakan이 같이 있는 조합은 제외
        if "Xayah" in team and "Rakan" in team:
            continue

        score = calculate_synergy_score(team)
        teams_scores.append((team, score))

    # 점수가 높은 순으로 정렬하여 상위 top_n 개의 팀 반환
    top_teams = sorted(teams_scores, key=lambda x: x[1], reverse=True)[:top_n]
    return top_teams

# 사용자로부터 챔피언 수 입력받기
champion_count = int(input("챔피언 수를 입력하세요: "))

# 최적의 덱 3개와 그 시너지 출력
top_teams = find_top_teams(champion_count)
for idx, (team, score) in enumerate(top_teams, 1):
    print(f"덱 {idx}: {team}, 시너지 점수: {score}")

from itertools import combinations
from collections import defaultdict

# 챔피언과 시너지 데이터 정의
champions_synergies = {
    "Dragonlord": ["Lee Sin", "Xayah", "Rakan", "Diana", "Janna"],
    "Dryad": ["Ornn", "Rek'Sai", "Azir", "Kindred", "Gnar"],
    "Fated": ["Sett", "Syndra", "Kindred", "Yasuo", "Ahri", "Thresh", "Aphelios"],
    "Fortune": ["Annie", "Kobuko", "Tristana", "Zoe", "Teemo"],
    "Ghostly": ["Kayn", "Aatrox", "Morgana", "Caitlyn", "Illaoi", "Shen"],
    "Heavenly": ["Qiyana", "Wukong", "Neeko", "Kha'Zix", "Soraka", "Malphite"],
    "Inkshadow": ["Kai'Sa", "Aatrox", "Udyr", "Volibear", "Senna", "Jax"],
    "Mythic": ["Nautilus", "Bard", "Hwei", "Lillia", "Neeko", "Kog'Maw", "Cho'Gath", "Tahm Kench"],
    "Porcelain": ["Lissandra", "Ashe", "Lux", "Amumu"],
    "Storyweaver": ["Galio", "Garen", "Riven", "Zoe", "Irelia", "Sivir", "Zyra"],
    "Umbral": ["Sett", "Sylas", "Yorick", "Alune", "Yone", "Darius"],
    "Altruist": ["Rakan", "Riven", "Soraka"],
    "Arcanist": ["Lissandra", "Syndra", "Zoe", "Neeko", "Lux", "Ahri", "Illaoi"],
    "Artist": ["Hwei"],
    "Behemoth": ["Ornn", "Yorick", "Udyr", "Cho'Gath", "Shen", "Thresh", "Malphite"],
    "Bruiser": ["Galio", "Sylas", "Aatrox", "Rek'Sai", "Kobuko", "Riven", "Tahm Kench"],
    "Duelist": ["Qiyana", "Lee Sin", "Tristana", "Volibear", "Irelia", "Yasuo", "Darius"],
    "Great": ["Wukong"],
    "Invoker": ["Annie", "Alune", "Azir", "Lillia", "Kog'Maw", "Janna"],
    "Lovers": ["Xayah", "Rakan"],
    "Reaper": ["Kayn", "Yone", "Kindred", "Kha'Zix"],
    "Sage": ["Morgana", "Diana", "Wukong", "Zyra"],
    "Sniper": ["Ashe", "Senna", "Kog'Maw", "Caitlyn", "Aphelios"],
    "Spirit Walker": ["Udyr"],
    "Trickshot": ["Kai'Sa", "Xayah", "Bard", "Teemo", "Sivir"],
    "Warden": ["Nautilus", "Garen", "Sett", "Jax", "Amumu", "Illaoi", "Gnar"]
}

# 시너지 활성화 조건과 점수 증가표
synergy_activation = {
    "Dragonlord": (2, 1),
    "Heavenly": (2, 1),
    "Altruist": (2, 1),
    "Sage": (2, 1),
    "Dryad": (2, 2),
    "Ghostly": (2, 2),
    "Porcelain": (2, 2),
    "Umbral": (2, 2),
    "Arcanist": (2, 2),
    "Behemoth": (2, 2),
    "Bruiser": (2, 2),
    "Duelist": (2, 2),
    "Invoker": (2, 2),
    "Reaper": (2, 2),
    "Sniper": (2, 2),
    "Trickshot": (2, 2),
    "Warden": (2, 2),
    "Fated": (3, 2),
    "Fortune": (3, 2),
    "Inkshadow": (3, 2),
    "Mythic": (3, 2),
    "Storyweaver": (3, 2),
    "Spirit Walker": (1, 1),
    "Great": (1, 1),
    "Artist": (1, 1),
    "Lovers": (1, 1)
}

def calculate_synergy_score(champions):
    synergy_count = defaultdict(int)
    for champ in champions:
        for synergy, champs in champions_synergies.items():
            if champ in champs:
                synergy_count[synergy] += 1

    synergy_score = 0
    for synergy, count in synergy_count.items():
        activation, increment = synergy_activation[synergy]
        if count >= activation:
            synergy_score += (count - activation) // increment + 1

    return synergy_score, {k: v for k, v in synergy_count.items() if v >= synergy_activation[k][0]}

def find_best_deck(champion_pool, num_champions):
    best_score = 0
    best_deck = []
    best_synergies = {}

    # 필터링: 최소 시너지 활성화 개수에 맞는 챔피언 조합만 고려
    filtered_pool = []
    for champ in champion_pool:
        for synergy, champs in champions_synergies.items():
            if champ in champs:
                filtered_pool.append(champ)
                break

    for combo in combinations(filtered_pool, num_champions):
        score, synergies = calculate_synergy_score(combo)
        if score > best_score:
            best_score = score
            best_deck = combo
            best_synergies = synergies

    return best_deck, best_score, best_synergies

def main():
    champion_pool = set(champ for champs in champions_synergies.values() for champ in champs)
    num_champions = int(input("몇 명의 챔피언들로 시너지 조합을 짤까요? "))

    best_deck, best_score, best_synergies = find_best_deck(champion_pool, num_champions)

    print("최적의 덱:")
    print(best_deck)
    print("시너지 점수:", best_score)
    print("활성화된 시너지:")
    for synergy, count in best_synergies.items():
        print(f"{synergy}: {count}명")

if __name__ == "__main__":
    main()

from itertools import combinations
from collections import defaultdict

# 챔피언과 시너지 데이터 정의
champions_synergies = {
    "Dragonlord": ["Lee Sin", "Xayah", "Rakan", "Diana", "Janna"],
    "Dryad": ["Ornn", "Rek'Sai", "Azir", "Kindred", "Gnar"],
    "Fated": ["Sett", "Syndra", "Kindred", "Yasuo", "Ahri", "Thresh", "Aphelios"],
    "Fortune": ["Annie", "Kobuko", "Tristana", "Zoe", "Teemo"],
    "Ghostly": ["Kayn", "Aatrox", "Morgana", "Caitlyn", "Illaoi", "Shen"],
    "Heavenly": ["Qiyana", "Wukong", "Neeko", "Kha'Zix", "Soraka", "Malphite"],
    "Inkshadow": ["Kai'Sa", "Aatrox", "Udyr", "Volibear", "Senna", "Jax"],
    "Mythic": ["Nautilus", "Bard", "Hwei", "Lillia", "Neeko", "Kog'Maw", "Cho'Gath", "Tahm Kench"],
    "Porcelain": ["Lissandra", "Ashe", "Lux", "Amumu"],
    "Storyweaver": ["Galio", "Garen", "Riven", "Zoe", "Irelia", "Sivir", "Zyra"],
    "Umbral": ["Sett", "Sylas", "Yorick", "Alune", "Yone", "Darius"],
    "Altruist": ["Rakan", "Riven", "Soraka"],
    "Arcanist": ["Lissandra", "Syndra", "Zoe", "Neeko", "Lux", "Ahri", "Illaoi"],
    "Artist": ["Hwei"],
    "Behemoth": ["Ornn", "Yorick", "Udyr", "Cho'Gath", "Shen", "Thresh", "Malphite"],
    "Bruiser": ["Galio", "Sylas", "Aatrox", "Rek'Sai", "Kobuko", "Riven", "Tahm Kench"],
    "Duelist": ["Qiyana", "Lee Sin", "Tristana", "Volibear", "Irelia", "Yasuo", "Darius"],
    "Great": ["Wukong"],
    "Invoker": ["Annie", "Alune", "Azir", "Lillia", "Kog'Maw", "Janna"],
    "Lovers": ["Xayah", "Rakan"],
    "Reaper": ["Kayn", "Yone", "Kindred", "Kha'Zix"],
    "Sage": ["Morgana", "Diana", "Wukong", "Zyra"],
    "Sniper": ["Ashe", "Senna", "Kog'Maw", "Caitlyn", "Aphelios"],
    "Spirit Walker": ["Udyr"],
    "Trickshot": ["Kai'Sa", "Xayah", "Bard", "Teemo", "Sivir"],
    "Warden": ["Nautilus", "Garen", "Sett", "Jax", "Amumu", "Illaoi", "Gnar"]
}

# 시너지 활성화 조건과 점수 증가표
synergy_activation = {
    "Dragonlord": (2, 1),
    "Heavenly": (2, 1),
    "Altruist": (2, 1),
    "Sage": (2, 1),
    "Dryad": (2, 2),
    "Ghostly": (2, 2),
    "Porcelain": (2, 2),
    "Umbral": (2, 2),
    "Arcanist": (2, 2),
    "Behemoth": (2, 2),
    "Bruiser": (2, 2),
    "Duelist": (2, 2),
    "Invoker": (2, 2),
    "Reaper": (2, 2),
    "Sniper": (2, 2),
    "Trickshot": (2, 2),
    "Warden": (2, 2),
    "Fated": (3, 2),
    "Fortune": (3, 2),
    "Inkshadow": (3, 2),
    "Mythic": (3, 2),
    "Storyweaver": (3, 2),
    "Spirit Walker": (1, 1),
    "Great": (1, 1),
    "Artist": (1, 1),
    "Lovers": (1, 1)
}

def calculate_synergy_score(champions):
    if "Xayah" in champions and "Rakan" in champions:
        return -1, {}

    synergy_count = defaultdict(int)
    for champ in champions:
        for synergy, champs in champions_synergies.items():
            if champ in champs:
                synergy_count[synergy] += 1

    synergy_score = 0
    for synergy, count in synergy_count.items():
        activation, increment = synergy_activation[synergy]
        if count >= activation:
            synergy_score += (count - activation) // increment + 1

    return synergy_score, {k: v for k, v in synergy_count.items() if v >= synergy_activation[k][0]}

def find_best_decks(champion_pool, num_champions, top_n=5):
    top_decks = []

    # 필터링: 최소 시너지 활성화 개수에 맞는 챔피언 조합만 고려
    filtered_pool = []
    for champ in champion_pool:
        for synergy, champs in champions_synergies.items():
            if champ in champs:
                filtered_pool.append(champ)
                break

    for combo in combinations(filtered_pool, num_champions):
        score, synergies = calculate_synergy_score(combo)
        if score > 0:
            top_decks.append((score, combo, synergies))
            top_decks = sorted(top_decks, key=lambda x: x[0], reverse=True)[:top_n]

    return top_decks

def main():
    champion_pool = set(champ for champs in champions_synergies.values() for champ in champs)
    num_champions = int(input("몇 명의 챔피언들로 시너지 조합을 짤까요? "))

    top_decks = find_best_decks(champion_pool, num_champions)

    print("상위 5개의 덱:")
    for i, (score, deck, synergies) in enumerate(top_decks):
        print(f"\n덱 {i + 1}:")
        print(deck)
        print("시너지 점수:", score)
        print("활성화된 시너지:")
        for synergy, count in synergies.items():
            print(f"{synergy}: {count}명")

if __name__ == "__main__":
    main()